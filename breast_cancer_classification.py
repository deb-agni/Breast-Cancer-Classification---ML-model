# -*- coding: utf-8 -*-
"""Breast_cancer_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_qN3jrMTUVXYLDF4QGbcgipl0U-IJL2n
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('/content/breast_cancer_dataset.csv')
df.head()

df.shape

df.info()

del df['id']

del df['Unnamed: 32']

df.sample()

df['diagnosis'].value_counts(normalize=True)*100

"""#Labled as

B / Benign Tumor --> 0

M / Malignant Tumor --> 1
"""

df['diagnosis'] = df['diagnosis'].map({'B':0, 'M':1})

df.sample()

df.groupby('diagnosis').mean()

# separating target and features
x = df.drop('diagnosis', axis=1)
y = df['diagnosis']

# Train Test split
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# Feature Scalling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

# Checking the scalling
x_train

# Model Creation (Logistic Regression)
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(x_train,y_train)

# Model Testing
y_pred = model.predict(x_test)
y_pred

# Model Evaluation
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
print(f"The accuracy rate of the model is: {accuracy_score(y_test,y_pred)*100} %")

print(confusion_matrix(y_test,y_pred))

print(classification_report(y_test,y_pred))

input_data = (13.64,16.34,87.21,571.8,0.07685,0.06059,0.01857,0.01723,0.1353,0.05953,0.1872,0.9234,1.449,14.55,0.004477,0.01177,0.01079,0.007956,0.01325,0.002551,14.67,23.19,96.08,656.7,0.1089,0.1582,0.105,0.08586,0.2346,0.08025)

#change the input data as numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the numpy array as we are predicting for one datapoint
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#scaling the input data
input_data_reshaped = sc.transform(input_data_reshaped)

#predicting the given input
prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == 0):
  print('The Breast Cancer is Benign')

else:
  print('The Breast Cancer is Malignant')